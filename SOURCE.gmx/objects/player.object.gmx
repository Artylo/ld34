<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Animation
image_speed = 0.1;

//Movement
mspeed = 1;
isJump = false;
isCharge = false;
isSwing = false;
canClimb = false;
isClimb = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation

if(input_left)image_xscale = abs(image_xscale);
if(input_right)image_xscale = abs(image_xscale)*-1;

if(!isMoving)
{
    image_speed = 0;
    image_index = 0;
}
else
{
    image_speed = 0.2*speed;
}


if(isSwing and isJump)
{
    image_angle = sword.image_angle;
}
else image_angle = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keybind Inputs

input_left = keyboard_check(vk_left) or keyboard_check(ord('A'));
input_right = keyboard_check(vk_right) or keyboard_check(ord('D'));
input_jump = keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('W'));
input_swing = mouse_check_button_pressed(mb_left);

isMoving = input_left or input_right;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if(sprite_index = s_player)
{
    if(!position_meeting(x,bbox_bottom+vspeed,platform))
    {
        gravity = 0.5;
        
    }
    else
    {
        gravity = 0;
        vspeed = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Horizontal Movement

if(sprite_index = s_player)
{

//Normal
if(input_left)
{
    if(bbox_left &gt; 0)
    {
        if(position_meeting(x-sword.swordDist,y,sword))
        {
            hspeed = -mspeed*2;
            isCharge = true;
            if(position_meeting(x,bbox_bottom+vspeed,platform))
            {
                repeat(irandom(5))
                {
                    with instance_create(bbox_right,bbox_bottom,dust)
                    {
                        motion_add(random_range(360-25,360+25),random(1));
                    }
                }
            }
        }
        else
        {
            hspeed = -mspeed;
            isCharge = false;
        }
    }
}

if(input_right)
{
    if(bbox_right &lt; room_width)
    {
        if(position_meeting(x+sword.swordDist,y,sword))
        {
            hspeed = mspeed*2;
            isCharge = true;
            if(position_meeting(x,bbox_bottom+vspeed,platform))
            {
                repeat(irandom(5))
                {
                    with instance_create(bbox_right,bbox_bottom,dust)
                    {
                        motion_add(random_range(180-25,180+25),random(1));
                    }
                }
            }
        }
        else
        {
            hspeed = mspeed;
            isCharge = false;
        }
    }
}




if(!isMoving) hspeed = 0;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vertical Movement

if(sprite_index = s_player)
{

if(input_jump)
{
    if(!isJump)
    {
        motion_add(90,mspeed*10);
        isJump = true;
    }
}
if(position_meeting(x,bbox_bottom+vspeed,platform))
{
    if(isJump)
    {
        isJump = false;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swing Sword

if(sprite_index = s_player)
{

if(input_swing)
{
    if(!isSwing)
    {
        isSwing = true;
        sword.isSwing = true;
        sword.isLeft = 360;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Climbing
if(director.level != director.mlevel)
{
    if(x &gt; vine.bbox_left and x &lt; vine.bbox_right)
    {
        if(input_jump)
        {
            generate_level();
            sprite_index = s_player_climb;
            speed = 0;
            image_speed = 0.1;
            //director.upLeft += view_hview + 16*(director.mlevel-1);
            director.upLeft += view_hview;
        }
        
    }
}
if(sprite_index = s_player_climb)
{
    vspeed = -1;
    if(vine.bbox_bottom &gt; bbox_bottom)
    {
        sprite_index = s_player;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Debug
draw_set_font(font);
draw_set_colour(c_white);
draw_text(16,16,"level: " + string(director.level));
draw_text(16,32,"mlevel: " + string(director.mlevel));
draw_text(16,48,"vine: " + string(vine.size));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
